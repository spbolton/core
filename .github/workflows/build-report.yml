name: CICD Reports
run-name: Reports - ${{ github.event.workflow_run.name }}
on:
  workflow_run:
    workflows: ['Maven CICD Pipeline'] 
    types: [completed]

permissions:
  checks: write
  pull-requests: write

jobs:
  report:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    steps:
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v4
      - name: Download Workflow Data
        id: data-download
        uses: actions/download-artifact@v4
        with:
          name: 'workflow-data'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Download event Data
        id: event-data-download
        uses: actions/download-artifact@v4
        with:
          name: 'event-file'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      - name: Download Test Reports
        id: test-data
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: build-reports-test-*
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          merge-multiple: false
          path: test-reports
      - name: Publish Test Results
        id: test-results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          event_file: event.json
          event_name: ${{ github.event.workflow_run.event }}
          files: |
            test-reports/**/*.xml
            !test-reports/**/failsafe-summary.xml
      - name: Conclusion
        run: echo "test-results json is ${{ steps.test-results.outputs.json }}"
      - name: Get Workflow Data
        id: workflow-data
        env:
          TEST_SUMMARY: ${{ fromJSON(steps.test-results.outputs.json).summary }}
        run: |
          if [[ ! -e "workflow-data.json" ]]
          then
            echo "::warn title=Artifact 'workflow-data' missing::Expected artifact 'workflow-data' does not exist for pull_request event."
          else
            json=$(jq -c '.' workflow-data.json)
            trigger_event_name=$(echo $json | jq -r '.trigger_event_name // "null"')
            status=$(echo $json | jq -r '.aggregate_status // "null"')
            pr_number=$(echo $json | jq -r '.pr_number // "null"')
            pr_author=$(echo $json | jq -r '.pr_author // "null"')
            run_id=$(echo $json | jq -r '.run_id // "null"')
            first_fail_step=$(echo $json | jq -r '.first_fail_step // "None"')
            first_fail_module=$(echo $json | jq -r '.first_fail_module // "None"')
            first_fail_error=$(echo $json | jq -r '.first_fail_error // "None"')
            pr_title=$(echo $json | jq -r '.pr_title // "null"')
            branch=$(echo $json | jq -r '.branch // "null"')
            head_sha=$(echo $json | jq -r '.head_sha // "null"')
            head_author=$(echo $json | jq -r '.head_author // "null"')
            head_name=$(echo $json | jq -r '.head_name // "null"')
            source_repository=$(echo $json | jq -r '.source_repository // "null"')
            action_run_url="https://github.com/$source_repository/actions/runs/$run_id"
            pr_number_url="https://github.com/$source_repository/pull/$pr_number"
            branch_url="https://github.com/$source_repository/tree/$branch"
            commit_id_url="https://github.com/$source_repository/pull/$pr_number/commits/$head_sha"
            test_results_url="https://github.com/$source_repository/pull/${pr_number}/checks"
           
            # Load the test results JSON output
            test_results_json='${{ steps.test-results.outputs.json }}'
            
            # Extract data from the test results JSON
            test_conclusion=$(echo $test_results_json | jq -r '.conclusion')
            test_passed=$(echo $test_results_json | jq -r '.stats.tests_succ')
            test_failed=$(echo $test_results_json | jq -r '.stats.tests_fail')
            test_skipped=$(echo $test_results_json | jq -r '.stats.tests_skip')
            test_elapsed=$(echo $test_results_json | jq -r '.stats.duration')
            test_results_url=$(echo $test_results_json | jq -r '.check_url')
        
            
            
            
            if [[ "$status" == "SUCCESS" ]]; then
              echo "status_icon=✅" >> $GITHUB_OUTPUT
            else
              echo "status_icon=❌" >> $GITHUB_OUTPUT
            fi
          
            if [[ "$trigger_event_name" == "pull_request" ]]; then
              echo "report_type=PR" >> $GITHUB_OUTPUT
            elif [[ "$trigger_event_name" == "merge_group" ]]; then
              echo "report_type=Merge Queue" >> $GITHUB_OUTPUT
            elif [[ "$trigger_event_name" == "push" ]]; then
              echo "report_type=Branch Merge" >> $GITHUB_OUTPUT
            else 
               echo "report_type=$trigger_event_name" >> $GITHUB_OUTPUT
            fi
            
          
            echo "json=$json" >> $GITHUB_OUTPUT
            echo "trigger_event_name=$trigger_event_name" >> $GITHUB_OUTPUT
            echo "has-json=true" >> $GITHUB_OUTPUT
            echo "status=$status" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "pr_author=$pr_author" >> $GITHUB_OUTPUT
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "first_fail_step=$first_fail_step" >> $GITHUB_OUTPUT
            echo "first_fail_module=$first_fail_module" >> $GITHUB_OUTPUT
            echo "first_fail_error=$first_fail_error" >> $GITHUB_OUTPUT
            echo "pr_title=$pr_title" >> $GITHUB_OUTPUT
            echo "branch=$branch" >> $GITHUB_OUTPUT
            echo "head_sha=$head_sha" >> $GITHUB_OUTPUT
            echo "head_author=$head_author" >> $GITHUB_OUTPUT
            echo "head_name=$head_name" >> $GITHUB_OUTPUT
            echo "source_repository=$source_repository" >> $GITHUB_OUTPUT
            echo "action_run_url=$action_run_url" >> $GITHUB_OUTPUT
            echo "pr_number_url=$pr_number_url" >> $GITHUB_OUTPUT
            echo "branch_url=$branch_url" >> $GITHUB_OUTPUT
            echo "commit_id_url=$commit_id_url" >> $GITHUB_OUTPUT
            echo "test_results_url=$test_results_url" >> $GITHUB_OUTPUT
            echo "test_conclusion=$test_conclusion" >> $GITHUB_OUTPUT
            echo "test_passed=$test_passed" >> $GITHUB_OUTPUT
            echo "test_failed=$test_failed" >> $GITHUB_OUTPUT
            echo "test_skipped=$test_skipped" >> $GITHUB_OUTPUT
            echo "test_elapsed=$test_elapsed" >> $GITHUB_OUTPUT
            echo "test_summary=${TEST_SUMMARY}" >> $GITHUB_OUTPUT
          
          fi
          
      - name: Post to a Slack channel
        if: steps.workflow-data.outputs.has-json == 'true' && steps.workflow-data.outputs.report_type == 'PR'
        id: slack-pr
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_REPORT_CHANNEL }}
          payload: |
            {
              "text": "Github Action ${{ steps.workflow-data.outputs.status }} for ${{ steps.workflow-data.outputs.report_type }} #${{ steps.workflow-data.outputs.pr_number }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.workflow-data.outputs.status_icon }} Github Action ${{ steps.workflow-data.outputs.status }} for ${{ steps.workflow-data.outputs.report_type }} #${{ steps.workflow-data.outputs.pr_number }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Action Run ID:* <${{ steps.workflow-data.outputs.action_run_url }} | ${{ steps.workflow-data.outputs.run_id }}> \n*Failure Step:* ${{ steps.workflow-data.outputs.first_fail_step }} \n*Failure Module:* ${{ steps.workflow-data.outputs.first_fail_module }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Failure Message:* ${{ steps.workflow-data.outputs.first_fail_error }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ steps.workflow-data.outputs.report_type }} Details:* \nAuthor: ${{ steps.workflow-data.outputs.pr_author }} \nName: <${{ steps.workflow-data.outputs.pr_number_url }} | ${{ steps.workflow-data.outputs.pr_title }}> \nNumber: #${{ steps.workflow-data.outputs.pr_number }} \nBranch: <${{ steps.workflow-data.outputs.branch_url }} | ${{ steps.workflow-data.outputs.branch }}>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit Details:* \nID: <${{ steps.workflow-data.outputs.commit_id_url }} | #${{ steps.workflow-data.outputs.head_sha }}> \nAuthor: ${{ steps.workflow-data.outputs.head_author }} \nName: ${{ steps.workflow-data.outputs.head_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🧪 Test Results = ${{ steps.workflow-data.outputs.test_conclusion }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.workflow-data.outputs.test_summary }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🔍 <${{ steps.workflow-data.outputs.test_results_url }} | View Test Results>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Post to a Slack channel non PR
        if: steps.workflow-data.outputs.has-json == 'true' && steps.workflow-data.outputs.report_type != 'PR'
        id: slack-non-pr
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_REPORT_CHANNEL }}
          payload: |
            {
              "text": "Github Action ${{ steps.workflow-data.outputs.status }} for ${{ steps.workflow-data.outputs.report_type }} #${{ steps.workflow-data.outputs.branch }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.workflow-data.outputs.status_icon }} Github Action ${{ steps.workflow-data.outputs.status }} for ${{ steps.workflow-data.outputs.report_type }} #${{ steps.workflow-data.outputs.branch }}",
                    "emoji": true
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🧪 Test Results = ${{ steps.workflow-data.outputs.test_conclusion }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.workflow-data.outputs.test_summary }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.workflow-data.outputs.test_summary }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Passed:* ${{ steps.workflow-data.outputs.test_passed }} \n*Failed:* ${{ steps.workflow-data.outputs.test_failed }} \n*Skipped:* ${{ steps.workflow-data.outputs.test_skipped }} \n*Elapsed Time:* ${{ steps.workflow-data.outputs.test_elapsed }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🔍 <${{ steps.workflow-data.outputs.test_results_url }} | View Test Results>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
